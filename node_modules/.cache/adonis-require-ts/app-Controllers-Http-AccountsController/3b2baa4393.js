"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class AccountsController {
    async Login({ session, view, response }) {
        if (session.get('id') != null) {
            response.redirect().toRoute('ArticlesController.Index');
        }
        else {
            return view.render("content.user.login");
        }
    }
    async PostLogin({ auth, session, request, response }) {
        const checkexist = await auth.use('web').attempt(request.input('email'), request.input('password'));
        const user = await User_1.default
            .query()
            .where('email', request.input('email'))
            .firstOrFail();
        if (await Hash_1.default.verify(user.password, request.input('password'))) {
            const result = await auth.use('web').login(user);
            session.put('id', user.id);
            session.put('name', user.name);
            session.put('email', user.email);
            session.flash('success', 'Successfully Login');
            response.redirect().toRoute('ArticlesController.Index');
        }
        else {
            session.flash('danger', 'Username or password not found in database');
            response.redirect().back();
        }
    }
    async Registration({ session, view, response }) {
        if (session.get('id') != null) {
            response.redirect().toRoute('ArticlesController.Index');
        }
        else {
            return view.render("content.user.register");
        }
    }
    async PostRegistration({ session, request, response }) {
        const newUserSchema = Validator_1.schema.create({
            name: Validator_1.schema.string([
                Validator_1.rules.required(),
            ]),
            email: Validator_1.schema.string([
                Validator_1.rules.required(),
                Validator_1.rules.email(),
                Validator_1.rules.unique({ table: 'users', column: 'email' }),
            ]),
            password: Validator_1.schema.string([
                Validator_1.rules.required(),
            ]),
            password_confirmation: Validator_1.schema.string([
                Validator_1.rules.required(),
                Validator_1.rules.confirmed('password'),
            ])
        });
        const trx = await Database_1.default.transaction();
        try {
            const payload = await request.validate({
                schema: newUserSchema
            });
            var settime = new Date();
            var now = settime.getFullYear() + '-' + settime.getMonth() + '-' + settime.getDate() + " " + settime.getHours() + ":" + settime.getMinutes() + ":" + settime.getSeconds();
            const password = await Hash_1.default.make(request.input('password'));
            const newdata = {
                email: request.input('email'),
                name: request.input('name'),
                password: password,
                created_at: now,
            };
            await trx
                .insertQuery()
                .table('users')
                .insert(newdata);
            await trx.commit();
            session.flash('success', 'User successfully created');
            response.redirect().back();
        }
        catch (error) {
            await trx.rollback();
            let errors = error.messages;
            console.log(error);
            for (const key in errors) {
                session.flash(key, errors[key]);
            }
            response.redirect().back();
        }
    }
    async Logout({ session, auth, response }) {
        await auth.use('web').logout();
        session.clear();
        response.redirect('/');
    }
}
exports.default = AccountsController;
//# sourceMappingURL=data:application/json;base64,