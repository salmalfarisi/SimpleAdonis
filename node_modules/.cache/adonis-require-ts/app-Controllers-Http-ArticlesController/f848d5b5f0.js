"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Article_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Article"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class ArticlesController {
    async Index({ request, session, view }) {
        const page = request.input('page', parseInt('1'));
        const limit = parseInt('20');
        const data = await Database_1.default
            .query()
            .from('articles')
            .select('*')
            .where('user_id', session.get('id'))
            .where('delete_status', false)
            .paginate(page, limit);
        data.baseUrl('/article/index');
        return view.render("content.article.index", { data });
    }
    async Create({ view }) {
        const formdata = new Article_1.default();
        return view.render("content.article.form", { formdata });
    }
    async Store({ session, request, response }) {
        const checkschema = Validator_1.schema.create({
            title: Validator_1.schema.string([
                Validator_1.rules.required(),
            ]),
            description: Validator_1.schema.string([
                Validator_1.rules.string(),
            ]),
            image: Validator_1.schema.file({
                required: true,
                size: '2mb',
                extnames: ['jpg', 'png', 'jpeg'],
            }),
        });
        const trx = await Database_1.default.transaction();
        try {
            const payload = await request.validate({
                schema: checkschema
            });
            var settime = new Date();
            var now = settime.getFullYear() + '-' + settime.getMonth() + '-' + settime.getDate() + " " + settime.getHours() + ":" + settime.getMinutes() + ":" + settime.getSeconds();
            const newfile = request.file('image');
            var setname = "article-" + Math.floor(Math.random() * 999999) + "." + newfile.extname;
            const newdata = {
                title: request.input('title'),
                description: request.input('description'),
                user_id: session.get('id'),
                delete_status: false,
                image: setname,
                created_at: now,
            };
            await payload.image.moveToDisk('images', {
                name: setname,
                overwrite: false,
            });
            await trx
                .insertQuery()
                .table('articles')
                .insert(newdata);
            await trx.commit();
            session.flash('success', 'Articles successfully created');
            response.redirect().toRoute('ArticlesController.Index');
        }
        catch (error) {
            await trx.rollback();
            let errors = error.messages;
            console.log(error);
            for (const key in errors) {
                session.flash(key, errors[key]);
            }
            response.redirect().back();
        }
    }
    async Edit({ request, response, view }) {
        const formdata = await Database_1.default
            .from('articles')
            .where('id', request.param('id'))
            .first();
        return view.render("content.article.form", { formdata });
    }
    async Update({ session, request, response }) {
        const checkschema = Validator_1.schema.create({
            title: Validator_1.schema.string([
                Validator_1.rules.required(),
            ]),
            description: Validator_1.schema.string([
                Validator_1.rules.string(),
            ]),
            image: Validator_1.schema.file.optional({
                size: '2mb',
                extnames: ['jpg', 'png', 'jpeg', 'JPG', 'PNG', 'JPEG'],
            }),
        });
        const trx = await Database_1.default.transaction();
        try {
            const payload = await request.validate({
                schema: checkschema
            });
            var settime = new Date();
            var now = settime.getFullYear() + '-' + settime.getMonth() + '-' + settime.getDate() + " " + settime.getHours() + ":" + settime.getMinutes() + ":" + settime.getSeconds();
            const newdata = {
                title: request.input('title'),
                description: request.input('description'),
                updated_at: now,
            };
            const newfile = request.file('image');
            if (newfile != null) {
                var setname = "article-" + Math.floor(Math.random() * 999999) + "." + newfile.extname;
                await payload.image.moveToDisk('images', {
                    name: setname,
                    overwrite: false,
                });
                newdata.image = setname;
            }
            await trx
                .from('articles')
                .where('id', request.param('id'))
                .update(newdata);
            await trx.commit();
            session.flash('success', 'Articles successfully update');
            response.redirect().toRoute('ArticlesController.Index');
        }
        catch (error) {
            await trx.rollback();
            let errors = error.messages;
            console.log(error);
            for (const key in errors) {
                session.flash(key, errors[key]);
            }
            response.redirect().back();
        }
    }
    async Destroy({ request, response }) {
        const trx = await Database_1.default.transaction();
        try {
            var settime = new Date();
            var now = settime.getFullYear() + '-' + settime.getMonth() + '-' + settime.getDate() + " " + settime.getHours() + ":" + settime.getMinutes() + ":" + settime.getSeconds();
            const newdata = {
                delete_status: true,
            };
            await trx
                .from('articles')
                .where('id', request.param('id'))
                .update(newdata);
            await trx.commit();
            session.flash('success', 'Articles successfully delete');
            response.redirect().back();
        }
        catch (error) {
            await trx.rollback();
            let errors = error.messages;
            console.log(error);
            for (const key in errors) {
                session.flash(key, errors[key]);
            }
            response.redirect().back();
        }
    }
}
exports.default = ArticlesController;
//# sourceMappingURL=data:application/json;base64,